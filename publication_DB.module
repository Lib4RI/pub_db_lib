<?php

/**
 * Implements hook_menu().
 */
function publication_DB_menu() {
    $items = array();
    $items['islandora/pubdb/get_mods'] = array(
        'page callback' => 'publication_DB_get_mods',
        'access arguments' => array('search islandora solr'),
        'type' => MENU_CALLBACK,
        //         'access arguments' => array(ISLANDORA_ADD_DS, 2),
    );
    
    $items['islandora/pubdb/alert'] = array(
        'page callback' => 'publication_DB_alert_batch',
        'access arguments' => array('search islandora solr'),
        'type' => MENU_CALLBACK,
        //         'access arguments' => array(ISLANDORA_ADD_DS, 2),
    );

    $items['islandora/pubdb/blacklist'] = array(
        'page callback' => 'publication_DB_blacklist',
        'access arguments' => array('search islandora solr'),
        'type' => MENU_CALLBACK,
        //         'access arguments' => array(ISLANDORA_ADD_DS, 2),
    );

    $items['islandora/pubdb/whitelist'] = array(
        'page callback' => 'publication_DB_whitelist',
        'access arguments' => array('search islandora solr'),
        'type' => MENU_CALLBACK,
        //         'access arguments' => array(ISLANDORA_ADD_DS, 2),
    );

    $items['islandora/pubdb/remove'] = array(
        'page callback' => 'publication_db_remove',
        'access arguments' => array('search islandora solr'),
        'type' => MENU_CALLBACK,
        //         'access arguments' => array(ISLANDORA_ADD_DS, 2),
    );

    $items['islandora/pubdb/restore'] = array(
        'page callback' => 'publication_db_restore',
        'access arguments' => array('search islandora solr'),
        'type' => MENU_CALLBACK,
        //         'access arguments' => array(ISLANDORA_ADD_DS, 2),
    );
    
    $items['admin/islandora/publication_DB'] = array(
        'title' => 'Publication Alert',
        'description' => '',
        'access arguments' => array('administer site configuration'),
    );
    
    $items['admin/islandora/publication_DB/lists'] = array(
        'title' => 'Publication lists',
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_lists_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/forms.inc',
    );
    
    $items['admin/islandora/publication_DB/alerts'] = array(
        'title' => 'Run Batch',
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_run_batch_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/forms.inc',
    );
    
    $items['admin/islandora/publication_DB/config'] = array(
        'title' => 'Config',
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_admin_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/forms.inc',
    );
    
    return $items;
}

//TODO move to lib4ri customization
function publication_DB_get_mods($query = NULL, $params = NULL){
    module_load_include('inc', 'publication_DB', 'utils/classes');
    
    $fetcher = new ScopusAbstractFetcher();
    $fetcher->setKey(variable_get('publication_DB_scopus_api_key',''));
    $fetcher->setDoi($_GET['doi']);
    $fetcher->getDom()->formatOutput = true;
    $fetcher->fetch();
    
    drupal_add_http_header('Content-Type', 'application/xml');
    echo ($fetcher->getXML());
    
    
}

function publication_DB_scopus_alert(&$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }
    
    module_load_include('inc', 'publication_DB', 'utils/classes');
    if (variable_get('publication_DB_scopus_alert')){
        $alert = new ScopusAlert();
        $list = $alert->setNewPubs()->getNewPubs();
    }

    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;
    
}

function publication_DB_test_alert(&$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }

    module_load_include('inc', 'publication_DB', 'utils/classes');
    $alert = new TestAlert();
    $list = $alert->setNewPubs()->getNewPubs();
    
    
    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;
    
}

function publication_DB_alert($AlertClass, &$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }
    
    module_load_include('inc', 'publication_DB', 'utils/classes');
    $list = $AlertClass->setNewPubs()->getNewPubs();
    
    
    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;
    
}

function publication_DB_alert_batch(){
    module_load_include('inc', 'publication_DB', 'utils/classes');
    $batch = array(
        'operations' => array(
//            array('publication_DB_scopus_alert', array()),
        ),
        'finished' => 'publication_DB_alert_batch_finished',
        'title' => t('Processing Example Batch'),
        'init_message' => t('Example Batch is starting.'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('Example Batch has encountered an error.'),
        'file' => drupal_get_path('module', 'publication_DB') . '/publication_DB.module',
    );
    
    //Populating batch operation
    if (variable_get('publication_DB_scopus_alert')){
//        $AlertClass = new ScopusAlert();
//        array_push($batch['operations'], array('publication_DB_alert', array($AlertClass)));
        array_push($batch['operations'], array('publication_DB_scopus_alert', array()));
    }
//    array_push($batch['operations'], array('publication_DB_test_alert', array()));
    
    batch_set($batch);
    
    // If this function was called from a form submit handler, stop here,
    // FAPI will handle calling batch_process().
    
    // If not called from a submit handler, add the following,
    // noting the url the user should be sent to once the batch
    // is finished.
    // IMPORTANT:
    // If you set a blank parameter, the batch_process() will cause an infinite loop
    
    batch_process(variable_get('publication_DB_ingest_landing'));
}
    

/**
 * Batch 'finished' callback
 */
function publication_DB_alert_batch_finished($success, $results, $operations) {
    if ($success) {
        // Here we do something meaningful with the results.
        $message = t('Scopus alert list updated');
        // $message .= theme('item_list', $results);  // D6 syntax
//        $message .= theme('item_list', array('items' => $results));
        drupal_set_message($message);
    }
    else {
        // An error occurred.
        // $operations contains the operations that remained unprocessed.
        $error_operation = reset($operations);
        $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
        drupal_set_message($message, 'error');
    }
    
}

/**
 * Implements hook_views_api().
 */
function publication_DB_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'publication_DB') . '/views',
    );
}

function publication_db_blacklist(){
    publication_db_set_status('blacklisted', variable_get('publication_DB_blacklist_landing'));
}

function publication_db_whitelist(){
    publication_db_set_status('queued', variable_get('publication_DB_whitelist_landing'));
}

function publication_db_remove(){
    publication_db_set_status('ingested', variable_get('publication_DB_remove_landing'));
}

function publication_db_restore(){
    publication_db_set_status('queued', variable_get('publication_DB_restore_landing'));
}
function publication_db_set_status($status, $landing_page){
    module_load_include('inc', 'publication_DB', 'includes/define');
    
    $doi = trim($_GET['DOI'],'_');
    $eid = trim($_GET['EID'],'_');
    
    
    $query = db_update(PUB_DB_ALERT_TABLE);
    $query->fields(array(
        'status' => $status,
    ));
    
    if (!empty($doi)){
        $query->condition('doi', $doi, '=')->execute();
    }
    else{
        $query->condition('eid', $eid, '=')->execute();
    }
    
    drupal_goto($landing_page);
}

