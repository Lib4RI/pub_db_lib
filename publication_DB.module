<?php

/**
 * Implements hook_menu().
 */
function publication_DB_menu() {
    $items = array();
    $items['islandora/pubdb/get_mods'] = array(
        'page callback' => 'publication_DB_get_mods',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );
    
    $items['islandora/pubdb/alert'] = array(
        'page callback' => 'publication_DB_alert_batch',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );

    $items['islandora/pubdb/clear'] = array(
        'page callback' => 'publication_DB_clear_queued',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );
    
    $items['islandora/pubdb/blacklist'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_blacklist_form'),
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/forms.inc',
    );

    $items['islandora/pubdb/whitelist'] = array(
        'page callback' => 'publication_DB_whitelist',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );

    $items['islandora/pubdb/remove'] = array(
        'page callback' => 'publication_db_remove',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );

    $items['islandora/pubdb/restore'] = array(
        'page callback' => 'publication_db_restore',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );

    $items['islandora/pubdb/inprocess'] = array(
        'page callback' => 'publication_db_inprocess',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );

    $items['islandora/pubdb/ingested'] = array(
        'page callback' => 'publication_db_ingested',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );
    
    $items['islandora/pubdb/showpdf'] = array(
        'page callback' => 'publication_db_show_pdf',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );
    
    $items['islandora/pubdb/rpage'] = array(
        'page callback' => 'publication_db_remove_pages',
        'access arguments' => array('access publication alert links'),
        'type' => MENU_CALLBACK,
    );
    
    $items['admin/islandora/publication_DB'] = array(
        'title' => 'Publication Alert',
        'description' => '',
        'access arguments' => array('access publication alert links'),
    );
    
    $items['admin/islandora/publication_DB/lists'] = array(
        'title' => 'Publication lists',
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_lists_form'),
        'access arguments' => array('access publication alert links'),
        'file' => 'includes/forms.inc',
    );
    
    $items['admin/islandora/publication_DB/alerts'] = array(
        'title' => 'Manage alert list',
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_run_batch_form'),
        'access arguments' => array('access publication alert links'),
        'file' => 'includes/forms.inc',
    );
    
    $items['admin/islandora/publication_DB/config'] = array(
        'title' => 'Config',
        'description' => '',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('publication_DB_admin_form'),
        'access arguments' => array('administer publication alert'),
        'file' => 'includes/forms.inc',
    );
    
    return $items;
}

//TODO move to lib4ri customization
function publication_DB_get_mods($query = NULL, $params = NULL){
    module_load_include('inc', 'publication_DB', 'utils/classes');
    
    $fetcher = new ScopusAbstractFetcher();
    $fetcher->setKey(variable_get('publication_DB_scopus_api_key',''));
    $fetcher->setDoi($_GET['doi']);
    $fetcher->getDom()->formatOutput = true;
    $fetcher->fetch();
    
    drupal_add_http_header('Content-Type', 'application/xml');
    echo ($fetcher->getXML());
    
    
}

function publication_DB_scopus_alert(&$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }
    
    module_load_include('inc', 'publication_DB', 'utils/classes');
    if (variable_get('publication_DB_scopus_alert')){
        $alert = new ScopusAlert();
        $list = $alert->setNewPubs()->getNewPubs();
    }

    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;
    
}

function publication_DB_test_alert(&$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }

    module_load_include('inc', 'publication_DB', 'utils/classes');
    $alert = new TestAlert();
    $list = $alert->setNewPubs()->getNewPubs();
    
    
    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;
    
}

function publication_DB_alert($AlertClass, &$context){
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $context['sandbox']['max'] = 1;
    }
    
    module_load_include('inc', 'publication_DB', 'utils/classes');
    $list = $AlertClass->setNewPubs()->getNewPubs();
    
    
    $context['sandbox']['current_node']++;
    $context['sandbox']['progress']++;
    
}

function publication_DB_alert_batch(){
    module_load_include('inc', 'publication_DB', 'utils/classes');
    $batch = array(
        'operations' => array(
//            array('publication_DB_scopus_alert', array()),
        ),
        'finished' => 'publication_DB_alert_batch_finished',
        'title' => t('Processing Example Batch'),
        'init_message' => t('Example Batch is starting.'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('Example Batch has encountered an error.'),
        'file' => drupal_get_path('module', 'publication_DB') . '/publication_DB.module',
    );
    
    //Populating batch operation
    if (variable_get('publication_DB_scopus_alert')){
//        $AlertClass = new ScopusAlert();
//        array_push($batch['operations'], array('publication_DB_alert', array($AlertClass)));
        array_push($batch['operations'], array('publication_DB_scopus_alert', array()));
    }
//    array_push($batch['operations'], array('publication_DB_test_alert', array()));
    
    batch_set($batch);
    
    // If this function was called from a form submit handler, stop here,
    // FAPI will handle calling batch_process().
    
    // If not called from a submit handler, add the following,
    // noting the url the user should be sent to once the batch
    // is finished.
    // IMPORTANT:
    // If you set a blank parameter, the batch_process() will cause an infinite loop
    
    batch_process(variable_get('publication_DB_alert_landing'));
}
    

/**
 * Batch 'finished' callback
 */
function publication_DB_alert_batch_finished($success, $results, $operations) {
    if ($success) {
        // Here we do something meaningful with the results.
        $message = t('Scopus alert list updated');
        // $message .= theme('item_list', $results);  // D6 syntax
//        $message .= theme('item_list', array('items' => $results));
        drupal_set_message($message);
    }
    else {
        // An error occurred.
        // $operations contains the operations that remained unprocessed.
        $error_operation = reset($operations);
        $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
        drupal_set_message($message, 'error');
    }
    
}

/**
 * Implements hook_views_api().
 */
function publication_DB_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'publication_DB') . '/views',
    );
}

function publication_db_blacklist($comment = ''){
    publication_db_set_status('blacklisted', variable_get('publication_DB_blacklist_landing'), $comment, 'delete');
}

function publication_db_whitelist(){
    publication_db_set_status('queued', variable_get('publication_DB_whitelist_landing'), '');
}

function publication_db_ingested(){
    publication_db_set_status('ingested', variable_get('publication_DB_ingested_landing'), '', 'delete');
}

function publication_db_restore(){
    publication_db_set_status('queued', variable_get('publication_DB_restore_landing'), '');
}

function publication_db_inprocess(){
    publication_db_set_status('inprocess', variable_get('publication_DB_inprocess_landing'), '', 'download');
}

function publication_db_set_status($status, $landing_page, $comment = '', $pdf_action = NULL){
    module_load_include('inc', 'publication_DB', 'includes/define');
    global $user;
    
    $doi = trim($_GET['DOI'],'_');
    $eid = trim($_GET['EID'],'_');
    $id = str_replace (',' , '' ,trim($_GET['id'],'_'));
    $set_fid = false;
    
    $q = db_select(PUB_DB_ALERT_TABLE, 't');
    $q->fields('t', array('status'));
    $q->condition('status', $status, '=');
    if (!empty($doi)){
        $q->condition('doi', $doi, '=');
    }
    else{
        $q->condition('eid', $eid, '=');
    }
    
    $res = $q->execute();
    foreach ($res as $st) {
        $st = $st->status;
    }
    
    if ($st == $status){
        drupal_set_message(t('The publication is already in list'), 'error');
    }
    else{
        
        if (module_exists('pdf_downloader')){
            module_load_include('module', 'pdf_downloader', 'pdf_downloader');
                       
            if ($pdf_action == 'download') {
                if (publication_DB_get_fid($id)){
                    drupal_set_message('Object ID: '.$id.' - PDF already downloaded', 'status');
                }
                else{
                    $pdf = pdf_downloader_dload_pdf($doi);
                    if($pdf){
                        drupal_set_message('Object ID: '.$id.' - PDF downloaded', 'status');
                        $uri = file_create_filename(md5($pdf).'.pdf', 'public://pdfdloader');
                        $file = file_save_data($pdf, $uri, FILE_EXISTS_REPLACE);
                        if ($file){
                            file_usage_add($file, 'publication_db', 'alert', $id);
                        }
                        $fid = publication_DB_get_fid($id);
                        $set_fid = true;
                    }
                    else{
                        drupal_set_message('Object ID: '.$id.' - Couldn\'t download PDF', 'warning');
                    }
                }
            }
            
            if (($pdf_action == 'delete') && (publication_DB_get_fid($id))){
                $file = file_load(publication_DB_get_fid($id));
                file_usage_delete($file, 'publication_db', 'alert', $id);
                file_delete($file);
                $fid = null;
                $set_fid = true;
            }
        }
        
        $query = db_update(PUB_DB_ALERT_TABLE);
        
        $fields =array(
            'status' => $status,
            'user' => $user->name,
            'comment' => $comment,
        );
        
        if ($set_fid){
            $fields['fid'] = $fid;
        }
        
        $query->fields($fields);
        
        
        if (!empty($doi)){
            $query->condition('doi', $doi, '=')->execute();
        }
        else{
            $query->condition('eid', $eid, '=')->execute();
        }
    }
        
    drupal_goto($landing_page);
}

function publication_db_remove(){
    module_load_include('inc', 'publication_DB', 'includes/define');

    $doi = trim($_GET['DOI'],'_');
    $eid = trim($_GET['EID'],'_');
    
    $query = db_delete(PUB_DB_ALERT_TABLE);
    
    if (!empty($doi)){
        $query->condition('doi', $doi, '=')->execute();
    }
    else{
        $query->condition('eid', $eid, '=')->execute();
    }
    
    
    drupal_goto(variable_get('publication_DB_remove_landing'));
}

function publication_DB_clear_queued(){
    module_load_include('inc', 'publication_DB', 'includes/define');
    
    $query = db_delete(PUB_DB_ALERT_TABLE);
    $query->condition('status', 'queued', '=')->execute();
    
    drupal_goto(variable_get('publication_DB_queued_url'));
}

function publication_DB_get_fid($id){
    $q = db_select('file_usage', 't');
    $q->fields('t', array('fid'));
    $q->condition('id', $id, '=');
    $q->condition('module', 'publication_db', '=');
    $q->condition('type', 'alert', '=');
    $res = $q->execute();
    foreach ($res as $st) {
        return $st->fid;
    }
}

function publication_DB_show_pdf(){
    $fid = trim($_GET['fid'],'_');
    $file = file_load($fid);
    
    drupal_goto(file_create_url($file->uri));
}

function publication_DB_remove_pages(){
    $id = str_replace (',' , '' ,trim($_GET['id'],'_'));
    $fid = trim($_GET['fid'],'_');
    $rhead = trim($_GET['rhead'],'_');
    $rtail = trim($_GET['rtail'],'_');
    
    $file = file_load($fid);
    $copy = file_copy($file, 'public://');
    
    $fpath = drupal_realpath($file->uri);
    $cpath = drupal_realpath($copy->uri);
    
//     file_usage_delete($file, 'publication_db', 'alert', $id);
//     file_delete($file);
    
    $npage = exec('qpdf '.$cpath.' --show-npages');
    $start = 1+$rhead;
    $stop = $npage-$rtail;
    exec("qpdf $cpath --pages $cpath {$start}-{$stop} -- $fpath");
    
    file_save($file);
    file_delete($copy);
    
    $nnpage = exec('qpdf '.$fpath.' --show-npages');
    
    if ($nnpage == $npage){        
        drupal_set_message('Page(s) not removed', 'warning');
    }
    else{
        $removed_pages = [];
        if ($start > 1){
            $removed_pages = array_merge($removed_pages, range(1,$start-1));
        }
        if ($stop != $npage){
            $removed_pages = array_merge($removed_pages, range($stop+1,$npage));
        }
        
        drupal_set_message('Object ID: '.$id.' - Page '.implode(', ', $removed_pages).' removed. (If you are visualizing the PDF in the browser, reload the corresponding page to check the result)', 'status');
    }
    
    drupal_goto(variable_get('publication_DB_inprocess_url'));
}


/**
 * Implements hook_permission().
 */
function publication_DB_permission() {
    return array(
        'access publication alert links' => array(
            'title' => t('Access publication alert links'),
        ),
        'administer publication alert' => array(
            'title' => t('Administer publication alert'),
        ),
    );
}

